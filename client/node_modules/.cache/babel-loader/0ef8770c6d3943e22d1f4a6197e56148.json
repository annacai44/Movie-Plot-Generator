{"ast":null,"code":"var _jsxFileName = \"/Users/annacai/Desktop/scriptai/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Form, TextArea, Button, Container } from 'semantic-ui-react';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [inputText, setInputText] = useState('');\n  const [inputLength, setInputLength] = useState('');\n  const [inputTheme, setInputTheme] = useState('');\n  const [resultText, setResultText] = useState('');\n  const [isSynopsis, setIsSynopsis] = useState(true);\n  const isMounted = useRef(false);\n  const prompt1 = `Keywords: ${inputText}\\nWrite a harmless synopsis for a ${inputLength} long ${inputTheme} film that includes all of the keywords.\\nSynopsis:\\n`;\n  const prompt2 = `Keywords: ${inputText}\\n\n\n                  Write a short excerpt from an interesting film with a plot that incorporates all of the keywords. Present the excerpt in proper script format.\\n\n  \n                  Excerpt:\\n`;\n\n  const {\n    Configuration,\n    OpenAIApi\n  } = require(\"openai\");\n\n  const configuration = new Configuration({\n    apiKey: process.env.REACT_APP_OPENAI_API_KEY\n  });\n  const openai = new OpenAIApi(configuration);\n\n  const getOpenAIResponse = () => {\n    openai.createCompletion({\n      model: \"text-davinci-002\",\n      prompt: `${isSynopsis ? prompt1 : prompt2}`,\n      max_tokens: 256,\n      temperature: 0.7\n    }).then(res => {\n      console.log(res.data.choices[0].text);\n      {\n        isSynopsis ? setResultText(res.data.choices[0].text.replace(/\\n/g, '')) : setResultText(res.data.choices[0].text);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  useEffect(() => {\n    if (isMounted.current) {\n      console.log(\"this is useEffect:\", isSynopsis);\n      getOpenAIResponse();\n    } else {\n      isMounted.current = true;\n    }\n  }, [isSynopsis]);\n\n  const setMode = e => {\n    if (e.target.value === 'synopsis') {\n      setIsSynopsis(true);\n\n      if (isSynopsis) {\n        getOpenAIResponse();\n      }\n    } else {\n      setIsSynopsis(false);\n\n      if (!isSynopsis) {\n        getOpenAIResponse();\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"container\",\n    textAlign: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"header\",\n        children: \"Movie Plot Generator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-body\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"List any number of keywords you want in your synopsis or script excerpt. Ex: man, woman, dog, McDonald's\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n          control: TextArea,\n          placeholder: \"Enter keywords for your synopsis...\",\n          onChange: e => setInputText(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Choose length of film.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: e => setInputLength(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"10 minutes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"30 minutes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"1 hour\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"2 hours\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Choose genre of film.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: e => setInputTheme(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Drama\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Comedy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Action\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Science fiction\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Adventure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          size: \"large\",\n          value: \"synopsis\",\n          onClick: setMode,\n          children: \"Make a synopsis!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          size: \"large\",\n          value: \"excerpt\",\n          onClick: setMode,\n          children: \"Make an excerpt!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Synopsis:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          readOnly: \"readonly\",\n          value: resultText,\n          rows: \"25\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"k9vRx/fvrHYr9C4WA0uUkqKfLCc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Form","TextArea","Button","Container","React","useState","useEffect","useRef","App","inputText","setInputText","inputLength","setInputLength","inputTheme","setInputTheme","resultText","setResultText","isSynopsis","setIsSynopsis","isMounted","prompt1","prompt2","Configuration","OpenAIApi","require","configuration","apiKey","process","env","REACT_APP_OPENAI_API_KEY","openai","getOpenAIResponse","createCompletion","model","prompt","max_tokens","temperature","then","res","console","log","data","choices","text","replace","catch","err","current","setMode","e","target","value"],"sources":["/Users/annacai/Desktop/scriptai/src/App.js"],"sourcesContent":["import './App.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Form, TextArea, Button, Container } from 'semantic-ui-react';\nimport React, { useState, useEffect, useRef } from 'react';\n\nfunction App() {\n  const [inputText, setInputText] = useState('');\n  const [inputLength, setInputLength] = useState('');\n  const [inputTheme, setInputTheme] = useState('');\n  const [resultText, setResultText] = useState('');\n  const [isSynopsis, setIsSynopsis] = useState(true);\n  const isMounted = useRef(false);\n  const prompt1 = `Keywords: ${inputText}\\nWrite a harmless synopsis for a ${inputLength} long ${inputTheme} film that includes all of the keywords.\\nSynopsis:\\n`\n  const prompt2 = `Keywords: ${inputText}\\n\n\n                  Write a short excerpt from an interesting film with a plot that incorporates all of the keywords. Present the excerpt in proper script format.\\n\n  \n                  Excerpt:\\n`\n\n  const { Configuration, OpenAIApi } = require(\"openai\");\n  const configuration = new Configuration({\n    apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  });\n  const openai = new OpenAIApi(configuration);\n\n  const getOpenAIResponse = () => {\n    openai.createCompletion({\n      model: \"text-davinci-002\",\n      prompt: `${isSynopsis ? prompt1 : prompt2}`,\n      max_tokens: 256,\n      temperature: 0.7,\n    }).then((res) => {\n      console.log(res.data.choices[0].text);\n      {isSynopsis ? setResultText(res.data.choices[0].text.replace(/\\n/g, '')) : setResultText(res.data.choices[0].text)}\n    }).catch((err) => {\n      console.log(err);\n    });\n  };\n\n  useEffect(() => {\n    if (isMounted.current) {\n      console.log(\"this is useEffect:\", isSynopsis);\n      getOpenAIResponse();\n    } else {\n      isMounted.current = true;\n    }\n  }, [isSynopsis])\n\n  const setMode = (e) => {\n    if (e.target.value === 'synopsis') {\n      setIsSynopsis(true);\n      if (isSynopsis) {\n        getOpenAIResponse();\n      }\n    } else {\n      setIsSynopsis(false);\n      if (!isSynopsis) {\n        getOpenAIResponse();\n      }\n    }\n  }\n\n  return (\n    <Container className='container' textAlign='center'>\n      <div className=\"app-header\">\n        <h2 className=\"header\">Movie Plot Generator</h2>\n      </div>\n      <div className='app-body'>\n            <Form>\n              <h3>List any number of keywords you want in your synopsis or script excerpt. Ex: man, woman, dog, McDonald's</h3>\n                <Form.Field control={TextArea} placeholder=\"Enter keywords for your synopsis...\" onChange={(e) => setInputText(e.target.value)}/>\n\n                <h3>Choose length of film.</h3>\n                <select onChange={(e) => setInputLength(e.target.value)}>\n                    <option>10 minutes</option>\n                    <option>30 minutes</option>\n                    <option>1 hour</option>\n                    <option>2 hours</option>\n                </select>\n\n                <h3>Choose genre of film.</h3>\n                <select onChange={(e) => setInputTheme(e.target.value)}>\n                    <option>Drama</option>\n                    <option>Comedy</option>\n                    <option>Action</option>\n                    <option>Science fiction</option>\n                    <option>Adventure</option>\n                </select>\n\n                <Button size='large' value='synopsis' onClick={setMode}>\n                  Make a synopsis!\n                </Button>\n\n                <Button size='large' value='excerpt' onClick={setMode}>\n                  Make an excerpt!\n                </Button>\n\n\n                <h2>Synopsis:</h2>\n                <textarea\n                    readOnly='readonly'\n                    value={resultText}\n                    rows='25'\n                />\n            </Form>\n        </div>\n    </Container>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}